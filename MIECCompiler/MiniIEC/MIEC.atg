
#include <assert.h>
#include <wchar.h>
#include "SymbolTable.h"

COMPILER MIEC

	enum eOp { eAdd, eSub, eMul, eDiv };

	BaseType* mInteger;
	SymbolTable mList;

CHARACTERS
	letter = 'A'..'Z' + 'a'..'z'.
	digit = "0123456789".
	cr  = '\r'.
	lf  = '\n'.
	tab = '\t'.
TOKENS
	ident  = letter {letter | digit}.
	number = digit {digit}.
  
    
COMMENTS
	FROM "(*" TO "*)" NESTED

IGNORE cr + lf + tab
   
PRODUCTIONS

MIEC 
	= "PROGRAM" ident
		[VarDecl]
	  "BEGIN"
		Statements
	  "END"
	.

VarDecl									(. mInteger = new BaseType(BaseType::eInt); .)
	= "BEGIN_VAR"						(. wchar_t* name; BaseType* type; size_t addr = 0; .)
	  Ident<name> ":" Type<type> ";"	(. mList.AddSymbol(new VarSym(type, name, addr), name); addr += type->GetSize(); .)
	{ Ident<name> ":" Type<type> ";"	(. mList.AddSymbol(new VarSym(type, name, addr), name); addr += type->GetSize(); .)
	}
	  "END_VAR"
	.

Statements 
	= Stat 
	{ Stat }
	.

Stat									(. Symbol* pSym; wchar_t* name; SymbolType* type; .)
	= Ident<name> ":=" Expr<type> ";"	(. pSym = mList.FindSymbol(name); assert(pSym > 0); assert(type == pSym->GetType()); .)
	| "print" "(" Expr<type> ")" ";"
	| "WHILE" Condition "DO" Statements "END"
	| "IF" Condition "THEN" Statements ["ELSE" Statements] "END"
	.

Condition								(. SymbolType* type; SymbolType* type1; .)
	= Expr<type> Relop Expr<type1>		(. /* eval: check type =?= type1 */ .)
	.

Expr<SymbolType* &type>					(. SymbolType* type1; .)
	= Term<type>						
	{ ( "+"								(. eOp op = eAdd; .)
	  | "-"								(. eOp op = eSub; .)
	  )
	  Term<type1>						(. assert(type == type1); .)
	}
	.

Term<SymbolType* &type>					(. SymbolType* type1; .)
	= Fact<type> 
	{ ( "*"								(. eOp op = eMul; .)
	  | "/"								(. eOp op = eDiv; .)
	  )
	  Fact<type1>						(. assert(type == type1); .)
	}
	.

Fact<SymbolType* &type>					(. Symbol* pSym; wchar_t* name; int val; .)
	= Ident<name>						(. pSym = mList.FindSymbol(name); assert(pSym > 0); type = pSym->GetType(); .)
	| Number<name, val>					(. type = mInteger; pSym = mList.AddSymbol(new ConstSym(type, name, val), name); .)
	| "(" Expr<type> ")"
	.

Relop 
	= "="
	| "<="
	| ">="
	| "!="
	| "<"
	| ">"
	.

Type<BaseType* &type>
	= "Integer"							(. type = mInteger; .)
	.

Ident<wchar_t* &name>
	= ident								(. name = t->val; .)
	.

Number<wchar_t* &name, int &val>
	= number							(. name = t->val; swscanf(t->val, L"%d", &val); .)
	.

END MIEC .