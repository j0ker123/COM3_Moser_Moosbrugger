
#include "SymbolTable.h"

COMPILER MIEC

	BaseType* mInteger;
	SymbolTable mList;

CHARACTERS
	letter = 'A'..'Z' + 'a'..'z'.
	digit = "0123456789".
	cr  = '\r'.
	lf  = '\n'.
	tab = '\t'.
TOKENS
	ident  = letter {letter | digit}.
	number = digit {digit}.
  
    
COMMENTS
	FROM "(*" TO "*)" NESTED

IGNORE cr + lf + tab
   
PRODUCTIONS

MIEC =									
	"PROGRAM" ident
		[VarDecl]
	"BEGIN"
		Statements
	"END"
	.

VarDecl =								(. mInteger = new BaseType(BaseType::eInt); .)
	"BEGIN_VAR"							(. std::string name; BaseType* type; size_t addr = 0; .)
	Ident<name> ":" Type<type> ";"		(. mList.AddSymbol(new VarSym(type, name, addr), name); addr += type->GetSize(); .)
	{Ident<name> ":" Type<type> ";" }	(. mList.AddSymbol(new VarSym(type, name, addr), name); addr += type->GetSize(); .)
	"END_VAR"
	.

Ident<std::string &name> =
	ident								(. name = coco_string_create_char(t->val); .)
	.

Type<BaseType* &type> =
	"Integer"							(. type = mInteger; .)
	.

Statements = 
	Stat {Stat}
	.

Stat = ident ":=" Expr ";"
	| "print" "(" Expr ")" ";"
	| "WHILE" Condition "DO" Statements "END"
	| "IF" Condition "THEN" Statements ["ELSE" Statements] "END"
	.

Expr = Term { ("+"|"-") Term }
	.

Term = Fact { ("*"|"/") Fact }
	.

Fact =									(. Symbol* pSym; std::string name; SymbolType* type; .)
	Ident<name>							(. pSym = mList.FindSymbol(name); type = pSym->GetType(); .)
	| number
	| "(" Expr ")"
	.

Condition = 
	Expr Relop Expr
	.

Relop = 
	"="
	| "<="
	| ">="
	| "!="
	| "<"
	| ">"
	.

END MIEC .