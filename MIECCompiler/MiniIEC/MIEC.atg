
#include <wchar.h>
#include "DACGenerator.h"

COMPILER MIEC

	DACGenerator* pDACGen;

	void Err(wchar_t* const msg) {
		errors->Error(la->line, la->col, msg);
	}

CHARACTERS
	letter = 'A'..'Z' + 'a'..'z' .
	digit = "0123456789" .
	specialchar = ANY - letter - digit .
	cr  = '\r' .
	lf  = '\n' .
	tab = '\t' .

TOKENS
	ident = letter {letter | digit} .
	number = digit {digit} .
	symbol = specialchar .

COMMENTS
	FROM "(*" TO "*)" NESTED

IGNORE cr + lf + tab

PRODUCTIONS

MIEC
	= "PROGRAM" ident					(. pDACGen = new MIEC::DACGenerator(this); .)
	[ DeclList
	] 
	  "BEGIN"
	  Statements
	  SYNC "END"						(. pDACGen->AddStat(DACSymbol::eExit, 0, 0); .)
	.

DeclList
	= "BEGIN_VAR"						(. size_t addr = 0; .)
	  VarDecl<addr>
	{ VarDecl<addr>
	} 
	  SYNC "END_VAR"
	.

VarDecl<size_t &addr>					(. wchar_t* pName = 0; DataType* pType = 0; .)
	= Ident<pName>
	  ":"
	  Type<pType>
	  ";"								(. if (pDACGen->AddSymbol(new VarSym(pName, pType, addr))) { addr += pType->GetSize(); } .)
	.

Statements
	= Stat
	{ Stat
	}
	.

Stat									(. Symbol* pSym = 0; .)
	= SYNC 
	( Branch<pSym>
	| Loop<pSym>
	| Print<pSym>
	| Assignment<pSym>
	).

Branch<Symbol* &pSym>					(. DACLabel* pLblElse = pDACGen->GetNewLabel(); DACLabel* pLblNext = pDACGen->GetNewLabel(); .)
	= "IF"
	  Condition<pSym>
	  "THEN"							(. pDACGen->AddStat(DACSymbol::eIfFalseJump, pSym, pLblElse); .)
	  Statements
	[ "ELSE"							(. pDACGen->AddStat(DACSymbol::eJump, pLblNext, 0); pDACGen->AddLabel(pLblElse); .)
	  Statements						(. pDACGen->AddLabel(pLblNext); .)
	] 
	  SYNC "END"						(. pDACGen->AddLabel(pLblElse); .)
	.

Loop<Symbol* &pSym>						(. DACLabel* pLblCond = pDACGen->GetNewLabel(); DACLabel* pLblNext = pDACGen->GetNewLabel(); .)
	= "WHILE"							(. pDACGen->AddLabel(pLblCond); .)
	  Condition<pSym>
	  "DO"								(. pDACGen->AddStat(DACSymbol::eIfFalseJump, pSym, pLblNext); .)
	  Statements						(. pDACGen->AddStat(DACSymbol::eJump, pLblCond, 0); .)
	  SYNC "END"						(. pDACGen->AddLabel(pLblNext); .)
	.

Print<Symbol* &pSym>
	= "print"
	  '(' Expr<pSym> SYNC ')'
	  ';'								(. pSym = pDACGen->AddStat(DACSymbol::ePrint, pSym, 0); .)
	.

Assignment<Symbol* &pSym>				(. wchar_t* pName = 0; Symbol* pSym1 = 0; .)
	= Ident<pName>						(. pSym = pDACGen->GetSymbol(pName); .)
	  ":="
	  Expr<pSym1>
	  SYNC ';'							(. pSym = pDACGen->AddStat(DACSymbol::eAssign, pSym, pSym1); .)
	.

Condition<Symbol* &pSym>				(. DACSymbol::OpKind op = DACSymbol::eUnknown; Symbol* pSym1 = 0; .)
	= Expr<pSym>
	  Relop<op>
	  Expr<pSym1>						(. pSym = pDACGen->AddStat(op, pSym, pSym1); .)
	.

Expr<Symbol* &pSym>						(. DACSymbol::OpKind op = DACSymbol::eUnknown; Symbol* pSym1 = 0; .)
	= Term<pSym>
	{ ( '+'								(. op = DACSymbol::eAdd; .)
	  | '-'								(. op = DACSymbol::eSubtract; .)
	  )
	  Term<pSym1>						(. pSym = pDACGen->AddStat(op, pSym, pSym1); .)
	}
	.

Term<Symbol* &pSym>						(. DACSymbol::OpKind op = DACSymbol::eUnknown; Symbol* pSym1 = 0; .)
	= Fact<pSym>
	{ ( '*'								(. op = DACSymbol::eMultiply; .)
	  | '/'								(. op = DACSymbol::eDivide; .)
	  )
	  Fact<pSym1>						(. pSym = pDACGen->AddStat(op, pSym, pSym1); .)
	}
	.

Fact<Symbol* &pSym>
	= ( ident							(. pSym = pDACGen->GetSymbol(t->val); .)
	  | number							(. int val; swscanf(t->val, L"%i", &val); pSym = pDACGen->AddSymbol(new ConstSym(t->val, pDACGen->GetType(IntegerType::Name), new IntegerObject(val))); .)
	  | "(" Expr<pSym> SYNC ")"
	  )									(. pDACGen->SetLine(t->line); .)
	.

Relop<DACSymbol::OpKind &op>
	= "="								(. op = DACSymbol::eIsEqual; .)
	| "<="								(. op = DACSymbol::eIsLessEqual; .)
	| ">="								(. op = DACSymbol::eIsGreaterEqual; .)
	| "!="								(. op = DACSymbol::eIsNotEqual; .)
	| "<"								(. op = DACSymbol::eIsLess; .)
	| ">"								(. op = DACSymbol::eIsGreater; .)
	.

Type<DataType* &pType>
	= ( "Integer"						(. pType = pDACGen->GetType(IntegerType::Name); .)
	  | ANY								(. Err(L"invalid Type"); pDACGen->SetLine(t->line); .)
	  )
	.

Ident<wchar_t* &pName>
	= ( ident							(. pName = t->val; .)
      | (number | symbol)				(. Err(L"invalid Ident"); .)
	  )									(. pDACGen->SetLine(t->line); .)
	.

END MIEC .
